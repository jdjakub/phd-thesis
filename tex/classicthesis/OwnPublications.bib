@inproceedings{CCS20,
  title = "What it takes to create with domain-appropriate tools",
  subtitle = "Reflections on implementing the ``Id'' system",
  author = "Joel Jakubovic",
  year = "2020",
  series = "Convivial Computing Salon 2020",
  location = "Porto, Portugal",
}
@inproceedings{ComplementaryBasic,
  title={Complementary science of interactive programming systems},
  author={Tomas Petricek and Joel Jakubovic},
  booktitle={History and Philosophy of Computing},
  year={2021}
}
@article{TechDims,
	doi = {10.22152/programming-journal.org/2023/7/13},
	year = 2023,
	month = {02},
	publisher = {Aspect-Oriented Software Association ({AOSA})},
	volume = {7},
	number = {3},
	author = {Joel Jakubovic and Jonathan Edwards and Tomas Petricek},
	title = {Technical Dimensions of Programming Systems},
	journal = {The Art, Science, and Engineering of Programming}
}
@inproceedings{Onward22,
author = {Jakubovic, Joel and Petricek, Tomas},
title = {Ascending the Ladder to Self-Sustainability: Achieving Open Evolution in an Interactive Graphical System},
year = {2022},
isbn = {9781450399098},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3563835.3568736},
abstract = {Programming is usually based on an inconvenient separation between an implementation level and a user level. Self-sustaining systems expose their implementation at their user level so that they can be modified and improved from within. However, the few examples that exist are tightly linked to textual language-based accounts of compiler bootstrapping. If we want systems to be truly open for modification, we need to step beyond programming languages and support more structured, visual ways of programming as well. How the bootstrapping process can work in such an interactive context is important yet unexplored territory. This essay is a critical report on our first-hand experience of building one such system named BootstrapLab. We trace and reconstruct the steps for achieving self-sustainability in an interactive, structured, graphical context: choose the platform; design the substrate; implement temporary infrastructure; implement a high-level language; pay off outstanding substrate debt; provide for domain-specific notations. Throughout, we discuss the challenges involved, identifying design forces that shaped the decisions and capturing heuristics that resolved these forces in our case. Both positive and negative results are featured, including the efficacy of the heuristics. We close by suggesting how to generalise what worked in our particular case to alternative paths and starting points. The enterprise as a whole takes us a further step towards achieving open and malleable programming systems for everyone.},
booktitle = {Proceedings of the 2022 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {240â€“258},
numpages = {19},
keywords = {self-sustaining, context-specific, visual programming, domain-specific, interactive, self-sustainable, bootstrapping},
location = {Auckland, New Zealand},
series = {Onward! 2022}
}
